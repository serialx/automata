Automata Project 1: Report (결과보고서)
=======================================

Name: 홍성진 (20060735, serialx@serialx.net)

Mealy Machine의 수정
--------------------
한글 조합을 하려면 Mealy Machine에 입력된 함수블록들이 현재 state와 input character를 알아야하기 때문에 이를 지원하기 위하여 함수블록들을 state와 input character를 받는 함수라고 가정하고 구조를 약간 변형하였습니다. 또한 Delete지원을 위한 state log관리 및 rollback기능도 구현하였습니다.

Delete 기능
-----------
Delete를 지원하기 위해서 Mealy Machine이 상태변화를 할 때마다 state를 stack에 저장하였습니다. Fallback이라는 이름의 method를 호출하면 이전 state로 rollback하는 형태로 구현하였습니다. 또한 이와 함게 초중종성 입력 버퍼도 복귀하여야 하므로 Mealy Machine에서 사용되는 function들의 버퍼도 변화시마다 기록하여 같이 rollback할 수 있도록 구현하였습니다.

Buffer & Output
---------------
구현에서 입력기가 현재 작업중인 글자를 Buffer라 칭하고 완성된 글자를 출력하는 것을 Output이라 칭했습니다. 초성우선 입력기의 경우 Buffer의 길이가 2글자입니다.

2벌식 한글 입력기 (받침우선)
----------------------------
기본적으로 최광무 교수님 논문의 오토마타 설계를 바탕으로 현대 키보드에 맞추어 (ㅐㅔ) 등을 추가한 variant를 제작하였습니다. 오토마타에 맞지 않는 경우 종료하며 Delete키를 지원합니다.

2벌식 한글 입력기 (초성우선)
----------------------------
초성우선 입력기의 경우 오토마타는 변화되지 않고 Mealy Machine에 주어지는 함수만 변형하여 초성우선을 만들었습니다.

한돌코드 입력기
---------------
한돌코드 입력기[1] 를 참고하여 제작하였습니다. 한돌코드 입력기는 '글자끝'키가 있고 종성입력이 별도 상태로 구분되기 때문에 받침우선, 초성우선이라는 개념이 존재하지 않습니다. 하지만 우선 기본인 받침우선을 제작하였고 조합 함수를 바꿔 초성우선도 같이 제작하였습니다.

[1] http://ko.wikipedia.org/wiki/%ED%9C%B4%EB%8C%80_%EC%A0%84%ED%99%94_%EB%AC%B8%EC%9E%90_%EC%9E%85%EB%A0%A5_%EB%B0%A9%EC%8B%9D#Microsoft_.EC.9C.88.EB.8F.847_:_.ED.95.9C.EB.8F.8C.EC.BD.94.EB.93.9C

Exmaples
--------

### 2벌식 받침우선 입력기

```
$ python qwerty1.py
Loaded Mealy Machine
Simulating output...
Output functions possible: (S, q) --> [<bound method QwertyHangulInput.onset of <__main__.QwertyHangulInput object at 0x108e2e850>>]
Transition functions possible: (S, q) --> ['V']
buf: ㅂ
output: 
Output functions possible: (V, n) --> [<bound method QwertyHangulInput.nucleus of <__main__.QwertyHangulInput object at 0x108e2e850>>]
Transition functions possible: (V, n) --> ['U']
buf: 부
output: 
Output functions possible: (U, p) --> [<bound method QwertyHangulInput.nucleus_combine of <__main__.QwertyHangulInput object at 0x108e2e850>>]
Transition functions possible: (U, p) --> ['I']
buf: 붸
output: 
Output functions possible: (I, f) --> [<bound method QwertyHangulInput.coda of <__main__.QwertyHangulInput object at 0x108e2e850>>]
Transition functions possible: (I, f) --> ['R']
buf: 뷀
output: 
Output functions possible: (R, r) --> [<bound method QwertyHangulInput.coda_combine of <__main__.QwertyHangulInput object at 0x108e2e850>>]
Transition functions possible: (R, r) --> ['L']
buf: 뷁
output: 
Output functions possible: (L, g) --> [<bound method QwertyHangulInput.onset_with_output of <__main__.QwertyHangulInput object at 0x108e2e850>>]
Transition functions possible: (L, g) --> ['V']
onset_with_output
buf: ㅎ
output: 뷁
Output functions possible: (V, k) --> [<bound method QwertyHangulInput.nucleus of <__main__.QwertyHangulInput object at 0x108e2e850>>]
Transition functions possible: (V, k) --> ['A']
buf: 하
output: 
```

Retrospect
----------
한돌코드의 경우 글자끝을 사용하여 초성우선, 받침우선의 개념이 필요가 없어서 인상깊었습니다. 그 외 오토마타를 구현하면서 한돌코드의 키보드 배치에 대한 깊은 뜻을 알 수 있었는데 흥미로웠습니다. 나중에 기회가 된다면 세벌식 입력기도 구현하면 좋을 것 같습니다.

조교님들 수고 많으십니다. 감사합니다.
